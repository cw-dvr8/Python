"""
Program: gen_peptide_comparison.py

Purpose: Create an Excel spreadsheet containing sequence file positions and
         whether the sequence matches the reference sequence at that position.

Input parameters: Peptide file (.xlsx)
                  Output file name (.xlsx)
                  Reference peptide ID

Outputs: Excel file

Execution python gen_peptide_comparison.py <peptide Excel spreadsheet>
              <output Excel file name> <reference peptide ID>

Note: The input file must start with the column "Start Position",
      "Stop Position", and the column containing the peptides from the
      reference sequence. The following columns should be the peptides from
      the variant sequences. The format follows the files generated by the
      /bioinfo/processes/peptide_generation/code/peptide_gen.py program. If
      that program is used to generate the peptides, this program will ignore
      the "New Peptide" column(s).

"""

import argparse
import pandas as pd

def main():

    parser = argparse.ArgumentParser()

    parser.add_argument("peptide_file", type=argparse.FileType("rb"),
                        help="Peptide file (Excel .xlsx)")
    parser.add_argument("output_file", type=argparse.FileType("wb"),
                        help="Ouput file (Excel .xlsx)")
    parser.add_argument("refseq_id", type=str, help="Reference sequence ID")

    args = parser.parse_args()

    # Use pandas to read in the Excel file and subset for the columns of
    # interest.
    pep_df = pd.read_excel(args.peptide_file)
    pep_cols = pep_df.columns
    pep_only_cols = [col_name for col_name in pep_cols if "New Peptide" not in col_name]
    pep_only_df = pep_df[pep_only_cols]

    # Get a list of the variant columns.
    variant_cols = [col_name for col_name in pep_only_cols if col_name not in ["Start Position", "Stop Position", args.refseq_id]]
    peptide_num = 1
    peptide_list = []

    for _, row in pep_only_df.iterrows():
        # Always write out the reference peptide.
        peptide_dict = {}
        peptide_dict["Peptide Number"] = peptide_num
        peptide_dict["Start Position"] = row["Start Position"]
        peptide_dict["Stop Position"] = row["Stop Position"]
        peptide_dict["Peptide"] = row[args.refseq_id]
        peptide_dict["Source"] = args.refseq_id
        peptide_list.append(peptide_dict)

        # Create a working copy of the variant columns list. This is necessary
        # because the individual variants are pulled off the list during
        # processing.
        working_var_list = variant_cols.copy()
        while working_var_list:
            curr_var = working_var_list.pop(0)
            peptide_dict = {}

            # Check to see if the current variant peptide matches the reference
            # peptide. If it does not, create a record for it.
            if row[curr_var] != row[args.refseq_id]:
                peptide_dict["Peptide Number"] = peptide_num
                peptide_dict["Start Position"] = row["Start Position"]
                peptide_dict["Stop Position"] = row["Stop Position"]
                peptide_dict["Peptide"] = row[curr_var]
                peptide_dict["Source"] = curr_var

                # Check to see if the current variant peptide matches any of
                # the other variant peptides. If so, add them to the Source.
                for next_var in working_var_list:
                    if row[curr_var] == row[next_var]:
                        peptide_dict["Source"] += f"/{next_var}"

            if peptide_dict:
                peptide_list.append(peptide_dict)

            # Since the current variant has already been checked against the
            # reference and the other variants if applicable, there is no need
            # to do the same checks with any other variant that has the same
            # peptide string.
            working_var_list = [var_val for var_val in working_var_list if row[var_val] != row[curr_var]]

        peptide_num += 1

    output_df = pd.DataFrame()
    output_df = pd.DataFrame.from_records(peptide_list)
    output_df.to_excel(args.output_file, sheet_name="Peptide Sources", index=False)
    args.output_file.close()


if __name__ == "__main__":
    main()
