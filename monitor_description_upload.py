#!/usr/bin/env python3

"""
Program: monitor_description_upload.py

Purpose: Traverse a Synapse folder containing study and assay descriptions and
         determine if any changes have been made to the contents. If so, create
         a GitHub issue for the description.

Input parameters: Root folder Synapse ID
                  Name of the GitHub repo to create the issue in.
                  Consortium

Outputs: GitHub issue

Execution: synapse_folder_sizes.py <root folder Synapse ID>
               <GitHub repo name> <consortium>

Notes: Users must have a .GithubConfig folder in their user directory
       containing a settings.json file. This file must contain a GitHub
       personal access token in order to be able to access the GitHub repo.
       The settings.json file should have the following format:

       {
         "description_uploads": "token generated by GitHub"
       }

       Go here to generate a GitHub personal access token:
           https://github.com/settings/tokens

       When generating the token, set the scope to "repo".

       This program also expects the folder containing the documentation to be
       named "Documentation".

"""

import argparse
import datetime
import dateutil.parser
import json
import os.path
import sys
import pytz
from github import Github
import synapseclient
import synapseutils

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("folder_syn_id", type=str,
                        help="SynID of the root Synapse folder containing the descriptions")
    parser.add_argument("github_repo_name", type=str,
                        help="Name of the repo to create the issue in")
    parser.add_argument("consortium", type=str,
                        help="Consortium Name")

    args = parser.parse_args()

    syn = synapseclient.Synapse()
    syn.login(silent=True)

    # Get the GitHub token.
    homedir = os.path.expanduser("~")
    try:
        github_config = json.load(open(f"{homedir}/.GithubConfig/settings.json", "r"))
    except:
        print(f"Error accessing {homedir}/.GithubConfig/settings.json - make sure directory and file exist\n")
        sys.exit()

    try:
        github_token = github_config["description_uploads"]
    except:
        print(f"Error accessing description_uploads key in {homedir}/.GithubConfig/settings.json\n")
        sys.exit()

    gh = Github(github_token)
    repo = gh.get_repo(args.github_repo_name)

    current_unaware_dt = datetime.datetime.today()
    # Have to make the current date timezone-aware so that we can use it in
    # date arithmetic later.
    current_dt = pytz.utc.localize(current_unaware_dt)

    # Walk the specified Synapse folder and look for a subfolder
    # called Documentation.
    syn_contents = synapseutils.walk(syn, args.folder_syn_id)
    for user_folder, dirlist, __ in syn_contents:
        if len(dirlist) > 0:
            for dirname, dir_syn_id in dirlist:
                if dirname == "Documentation":

                    # Create the issue title in case there are new or modified
                    # descriptions.
                    issue_title = f"{args.consortium} {user_folder[0]} ({user_folder[1]})- Documentation Change"
                    issue_body = ""

                    # Walk the documentation folder looking for new or updated
                    # files.
                    dir_contents = synapseutils.walk(syn, dir_syn_id)
                    for __, __, filelist in dir_contents:
                        if len(filelist) > 0:
                            for filename, file_syn_id in filelist:
                                try:
                                    file_entity = syn.restGET(f"/entity/{file_syn_id}")
                                except:
                                    continue

                                if ("createdOn" in file_entity) and ("modifiedOn" in file_entity):
                                    createdOn_dt = dateutil.parser.parse(file_entity["createdOn"])
                                    modifiedOn_dt = dateutil.parser.parse(file_entity["modifiedOn"])
                                    if (((current_dt - createdOn_dt).days <= 1) or
                                        ((current_dt - modifiedOn_dt).days <= 1)):

                                        if (modifiedOn_dt - createdOn_dt).days == 0:
                                            status = "New"
                                        else:
                                            status = "Modified"

                                        issue_body = issue_body + f"{status} file: {file_entity['name']}"
                                        issue_body = issue_body + f" ({file_syn_id})\n"
                                        issue_body = issue_body + f"Creation Date: {file_entity['createdOn']}\n"

                                        if status == "Modified":
                                            issue_body = issue_body + f"Modification Date: {file_entity['modifiedOn']}\n"

                                        issue_body = issue_body + "\n"
                    if issue_body:
                        # Create the GitHub issue.
                        issue = repo.create_issue(title = issue_title,
                                                  body = issue_body,
                                                  labels = [args.consortium])


if __name__ == "__main__":
    main()
