"""
Program: peptide_compare.py

Purpose: Look for incorrect target peptides by comparing the output
         of the peptide_gen.py program with the current Excel
         spreadsheet containing the list of peptides.

Input parameters: Current Excel spreadsheet
                  Spreadsheet generated by peptide_gen.py
                  Reference sequence
                  Target sequence

Outputs: Either a message that there are no difference, or a list
         of the differences

Execution: python peptide_compare.py <current Excel spreadsheet> 
               <new peptide spreadsheet> <reference sequence>
               <target sequence>

Note: It may be necessary to harmonize the column labels between
      the spreadsheets.
"""

import argparse
import numpy as np
import pandas as pd

"""
Function: main
"""
def main():

    parser = argparse.ArgumentParser()

    parser.add_argument("orig_file", type=argparse.FileType("rb"),
                        help="Original peptide file")
    parser.add_argument("new_file", type=argparse.FileType("rb"),
                        help="New peptide file")
    parser.add_argument("ref_seq", type=str, help="Reference sequence ID")
    parser.add_argument("target_seq", type=str, help="Target sequence ID")

    args = parser.parse_args()

    current_ref_seq = f"Current {args.ref_seq}"
    new_ref_seq = f"New {args.ref_seq}"
    current_target_seq = f"Current {args.target_seq}"
    new_target_seq = f"New {args.target_seq}"

    orig_file_df = pd.read_excel(args.orig_file)
    orig_seq_df = orig_file_df[["Start Position", "Stop Position", args.ref_seq, args.target_seq]].copy()
    orig_seq_df.rename(columns={args.ref_seq: current_ref_seq, args.target_seq: current_target_seq}, inplace=True)

    comp_file_df = pd.read_excel(args.new_file)
    comp_seq_df = comp_file_df[["Start Position", "Stop Position", args.ref_seq, args.target_seq]].copy()
    comp_seq_df.rename(columns={args.ref_seq: new_ref_seq, args.target_seq: new_target_seq}, inplace=True)


    comp_seq_df[f"{new_target_seq} matches"] = np.where(comp_seq_df[new_target_seq] == orig_seq_df[current_target_seq],
                                                        "True", "False")

    diff_target_df = comp_seq_df.loc[comp_seq_df[f"{new_target_seq} matches"] == "False"]

    if diff_target_df.empty:
        print(f"\nNo differences between {args.orig_file.name} and {args.new_file.name}.\n")
    else:
        print(diff_target_df.to_string(index=False))

if __name__ == "__main__":
    main()
