#!/usr/bin/env python3

"""
Program: monitor_documentation_upload.py

Purpose: Look up documentation files in a fileview of files uploaded through
         the dccvalidator to see if changes have been made to the contents. If
         so, create a GitHub issue for the documentation.

Input parameters: Synapse ID of the fileview containing the dccvalidator files
                  Name of the GitHub repo to create the issue in.
                  Consortium
                  Labels for GitHub

Outputs: GitHub issue

Execution: monitor_documentation_upload.py <fileview Synapse ID>
               <GitHub repo name> <consortium> <labels>

Notes: Users must have a .GithubConfig folder in their user directory
       containing a settings.json file. This file must contain a GitHub
       personal access token in order to be able to access the GitHub repo.
       The settings.json file should have the following format:

       {
         "documentation_uploads": "token generated by GitHub"
       }

       Go here to generate a GitHub personal access token:
           https://github.com/settings/tokens

       When generating the token, set the scope to "repo".

"""

import argparse
import datetime
import json
import os.path
import sys
from github import Github
import synapseclient

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("fileview_synid", type=str,
                        help="SynID of the fileview containing the dccvalidator uploads")
    parser.add_argument("github_repo_name", type=str,
                        help="Name of the repo to create the issue in")
    parser.add_argument("consortium", type=str,
                        help="Consortium name")
    parser.add_argument("labels", nargs="*",
                        help="Issue labels")

    args = parser.parse_args()

    syn = synapseclient.Synapse()
    syn.login(silent=True)

    # Get the GitHub token.
    homedir = os.path.expanduser("~")
    try:
        github_config = json.load(open(f"{homedir}/.GithubConfig/settings.json", "r"))
    except:
        print(f"Error accessing {homedir}/.GithubConfig/settings.json - make sure directory and file exist\n")
        sys.exit()

    try:
        github_token = github_config["documentation_uploads"]
    except:
        print(f"Error accessing documentation_uploads key in {homedir}/.GithubConfig/settings.json\n")
        sys.exit()

    gh = Github(github_token)
    repo = gh.get_repo(args.github_repo_name)

    current_dt = datetime.datetime.today()

    # Query the fileview. Get everything and then subset further down because
    # it has been problematic in other cases to do a subsetted query on the
    # fileview.
    query_stmt = f'SELECT * FROM {args.fileview_synid}'
    query_nan_df = syn.tableQuery(query_stmt).asDataFrame()

    # Pandas reads in empty fields as nan. Replace nan with None.
    query_df = query_nan_df.where(query_nan_df.notnull(), None).copy()

    # Per Nicole and Kara, the current method to distinguish documentation
    # files from metadata files is that the metadataType key is blank for
    # documentation files. Also, get a list of studies so that it can be used
    # to group issues.
    documentation_df = query_df.loc[(query_df["metadataType"].isnull()) &
                                    (query_df["study"].notnull())]
    study_list = list(set(documentation_df["study"].to_list()))

    if len(documentation_df) > 0:
        for study in study_list:
            study_df = documentation_df.loc[documentation_df["study"] == study]
            study_list = study_df.to_dict("records")

            # Initialize the issue title and body.
            issue_title = f"{args.consortium} {study} - Documentation Change"
            issue_body = ""

            for filerec in study_list:

                createdOn_dt = datetime.datetime.fromtimestamp(filerec["createdOn"] / 1e3)
                modifiedOn_dt = datetime.datetime.fromtimestamp(filerec["modifiedOn"] / 1e3)
                if ((current_dt - createdOn_dt).days == 0) or ((current_dt - modifiedOn_dt).days == 0):

                    if (modifiedOn_dt - createdOn_dt).days == 0:
                        status = "New"
                    else:
                        status = "Modified"

                    issue_body = issue_body + f"{status} file: {filerec['name']} ({filerec['id']})\n"
                    issue_body = issue_body + f"Creation Date: {createdOn_dt}\n"

                    if status == "Modified":
                        issue_body = issue_body + f"Modification Date: {modifiedOn_dt}\n"

                    issue_body = issue_body + "\n"

            if issue_body:
                # Create the GitHub issue.
                issue = repo.create_issue(title = issue_title,
                                          body = issue_body,
                                          labels = args.labels)


if __name__ == "__main__":
    main()
